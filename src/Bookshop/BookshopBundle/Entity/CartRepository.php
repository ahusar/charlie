<?php

namespace Bookshop\BookshopBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CartRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CartRepository extends EntityRepository {

    public function getCart($userid) {
        $qb = $this->createQueryBuilder('c')
                ->select('c')
                ->where('c.userId = :userid and c.active = 1')
                ->setParameter('userid', $userid);

        $results = $qb->getQuery()->getResult();
        if (count($results) > 0)
            return $results[0];
        else
            return null;
    }

    public function updateCart($cartid) {
        $qb = $this->createQueryBuilder('c')
                ->update()->set('c.user_id', $userid)
                ->where('c.id= :cartid')
                ->setParameter('cartid', $cartid);

        $qb->getQuery()->execute();
    }

    public function getCartbyId($cartid) {
        $qb = $this->createQueryBuilder('c')
                ->select('c')
                ->where('c.id = :cartid')
                ->setParameter('cartid', $cartid);

        $result = $qb->getQuery()->getResult();
        if (count($result) > 0)
            return $result[0];
        else
            return null;
    }

    public function putOnStock($id) {
        $em = $this->getEntityManager();
        $cart = $em->getRepository('BookshopBookshopBundle:Cart')->find($id);

        foreach ($cart->getCartitems() as $item) {
            $product = $item->getProductId();
            $em->getRepository('BookshopBookshopBundle:Product')->addStock($product->getId(), $item->getQuantity());
        }
    }

    public function takeFromStock($id) {
        $em = $this->getEntityManager();
        $cart = $em->getRepository('BookshopBookshopBundle:Cart')->find($id);

        foreach ($cart->getCartitems() as $item) {
            $product = $item->getProductId();
            $onStock = $em->getRepository('BookshopBookshopBundle:Product')->isOnStock($product->getId(), $item->getQuantity());
            if (!$onStock)
                return false;
        }

        foreach ($cart->getCartitems() as $item) {
            $product = $item->getProductId();
            $em->getRepository('BookshopBookshopBundle:Product')->addStock($product->getId(), -$item->getQuantity());
        }
        return true;
    }

}
