<?php

namespace Bookshop\BookshopBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository {

    public function getProducts($categoryid) {
        $qb = $this->createQueryBuilder('c')
                ->select('c')->where('c.category = :categ_id AND c.active = 1')
                ->setParameter('categ_id', $categoryid);

        return $qb->getQuery()
                        ->getResult();
    }

    public function getLast($nr) {
        $qb = $this->createQueryBuilder('l')
                ->select('l')->orderBy('l.id', 'desc')
                ->setMaxResults($nr);

        return $qb->getQuery()
                        ->getResult();
    }

    public function retrieveProduct($productid) {

        $qb = $this->createQueryBuilder('p')
                ->select('p')->where('p.id = :product_id')
                ->setParameter('product_id', $productid);

        return $qb->getQuery()
                        ->getResult();
    }

    public function relatedProducts($categoryid) {

        $qb = $this->createQueryBuilder('r')
                ->select('r')->where('r.category = :categoryid and r.active = 1')
                ->setParameter('categoryid', $categoryid);

        return $qb->getQuery()
                        ->getResult();
    }
    
    public function isOnStock($id, $quantity)
    {
       $qb = $this->createQueryBuilder('s')
                ->select('s.stock')->where('s.id = :id AND s.active = 1')
                ->setParameter('id', $id);
       $result=$qb->getQuery()->getSingleResult();

       if($result['stock'] >= $quantity)
           return true;
       else
           return false;
    }
    
    public function addStock($id, $quantity)
    {
        $qb = $this->createQueryBuilder('s')
                ->select('s.stock')->where('s.id = :id AND s.active = 1')
                ->setParameter('id', $id);
        $result = $qb->getQuery()->getSingleResult();
        $prevStock = $result['stock'];
        
        if($prevStock+$quantity >= 0){
            $qb = $this->createQueryBuilder('s')
                    ->update()->set('s.stock', $prevStock + $quantity)
                    ->where('s.id= :id')
                    ->setParameter('id', $id);
            $qb->getQuery()->execute();
        }
    }


    public function getNrAllProducts($filter)
    {
        $em = $this->getEntityManager();
        return $em->createQuery('SELECT COUNT(p) FROM BookshopBookshopBundle:Product p INNER JOIN BookshopBookshopBundle:Category c WITH c = p.category WHERE 1=1' . $filter)
                ->getSingleScalarResult();
    }
    public function getAllProductsQuery($request)
    {
        $filter = $this->createSqlFilter($request);
        $count = $this->getNrAllProducts($filter);
        $em = $this->getEntityManager();
        $dql = "SELECT p FROM BookshopBookshopBundle:Product p INNER JOIN BookshopBookshopBundle:Category c WITH c = p.category WHERE 1=1";
        $dql.=$filter;

        return $em->createQuery($dql)->setHint('knp_paginator.count', $count);
        
    }
    
    private function createSqlFilter($request){
        $filter = "";
        if (strlen($request->query->get('title'))>0) {
            $filter.= " AND p.title like '%" . $request->query->get('title') . "%'";
        }
        if (strlen($request->query->get('category'))>0) {
            $filter.= " AND c.id = " . $request->query->get('category');
        }

        if (strlen($request->query->get('stock'))>0)
            switch ($request->query->get('stock')) {
                case 'on':
                    $filter .= ' and p.stock>0';
                    break;
            } else {
            if (strlen($request->query->get('title'))>0 || strlen($request->query->get('category'))>0) {
                $filter .= ' and p.stock>=0';
            }
        }
        
        return $filter;
    }

}
